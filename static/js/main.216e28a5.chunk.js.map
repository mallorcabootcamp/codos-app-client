{"version":3,"sources":["components/CurrentCo2/CurrentCo2.tsx","components/IconWithValue/Icon.ts","components/IconWithValue/IconWithValue.tsx","components/TimeWithValuesGraph/TimeWithValuesGraph.tsx","components/Card/Card.tsx","config.ts","services/ApiService.ts","components/LateralBar/LateralBar.tsx","components/LateralMenuTransition/LateralMenuTransition.tsx","hooks/useStateWithLocalStorage.ts","screens/Main/Main.tsx","components/DatePicker/DatePicker.tsx","components/CardWithTextTab/CardWithTextTab.tsx","screens/History/History.tsx","components/ScrollToTop/ScrollToTop.tsx","App.js","serviceWorker.js","index.js"],"names":["maximumECoValue","CurrentCo2","eCoValue","backgroundColor","useMemo","getBackgroundColor","borderColor","getBorderColor","className","style","Icon","IconWithValue","value","icon","getIconFromIconName","size","iconName","faTint","faThermometerFull","axisColor","axisBottomTickLabelProps","dx","dy","textAnchor","fontFamily","fontSize","fill","axisLeftTickLabelProps","TimeWithValuesGraph","endTimeValue","width","historicalValues","uom","marginY","marginX","height","timeFormat","timeRank","startTime","endTime","stock","slice","getDate","d","Date","parseInt","time","xMax","yMax","scaleGridColumns","scaleLinear","range","domain","scaleAxisLeft","Math","max","map","min","scaleAxisBottom","scaleTime","extent","dateScale","stockValueScale","reverse","AreaClosed","data","x","y","getStockValue","yScale","GridColumns","scale","top","numTicks","stroke","strokeWidth","AxisBottom","hideTicks","tickStroke","tickLabelProps","tickFormat","moment","format","AxisLeft","left","e","Card","children","classes","classnames","config","ApiService","endpoint","user","fromDate","toDate","axios","method","url","params","then","response","selectedDevice","fromDateTs","round","valueOf","toDateTs","makeGetRequest","Promise","resolve","LateralBar","onClickOnClose","onClickOnDevice","devices","activeDevice","faBars","onClick","faTimesCircle","device","key","LateralMenuTransition","isVisible","CSSTransition","in","timeout","classNames","unmountOnExit","useStateWithLocalStorage","localStorageKey","useState","localStorage","getItem","setValue","useEffect","setItem","Main","setSelectedDevice","menuActived","setMenuActived","currentCo2","setCurrentCo2","currentTemperature","setCurrentTemperature","currentHumidity","setCurrentHumidity","co2Data","setCo2Data","deviceList","setDeviceList","getUsersList","apiResponse","floor","now","getCurrentCo2","getCurrentTemperature","getCurrentHumidity","getCo2Data","to","faSearch","DatePicker","text","date","onDateChanged","idValue","shortid","generate","htmlFor","onChange","target","name","type","id","CardWithTextTab","History","setFromDate","setToDate","graphsOnScreen","setGraphsOnScreen","temperatureData","setTemperatureData","humidityData","setHumidityData","getTemperatureData","getHumidityData","faChevronLeft","disabled","ScrollToTop","pathname","useLocation","window","scrollTo","App","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.216e28a5.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport \"./CurrentCo2.scss\";\n\nconst maximumColorRange = 145;\nconst maximumECoValue = 10000;\nconst redColorValue = 0;\n\ninterface Props { eCoValue: number }\n\nexport const CurrentCo2 = ({ eCoValue }: Props): JSX.Element => {\n\n    const backgroundColor = useMemo(() => {\n        return getBackgroundColor(eCoValue);\n    }, [eCoValue]);\n\n    const borderColor = useMemo(() => {\n        return getBorderColor(eCoValue);\n    }, [eCoValue]);\n\n    return (\n        <div className='container pt-0 pb-4 mb-2 current-co2-elem'>\n            <div className='text-center m-auto py-3 rounded-circle outer-circle' style={{ backgroundColor: borderColor }}>\n                <div className='text-center m-auto py-3 shadow rounded-circle inner-circle' style={{ backgroundColor }}>\n                    <p className='h5 p-0 m-0 text-white pt-5 mt-2 eco-elem'>eCO²</p>\n                    <p className='h3 p-0 m-0 text-white mt-1'><span>{eCoValue}</span> ppm</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst getBackgroundColor = (eCoValue: number) => {\n    const hue = ((1 - eCoValue / maximumECoValue) * maximumColorRange);\n    return `hsl(${eCoValue <= maximumECoValue ? hue : redColorValue},63%,49%)`;\n}\n\nconst getBorderColor = (eCoValue: number) => {\n    const hue = ((1 - eCoValue / maximumECoValue) * maximumColorRange);\n    return `hsl(${eCoValue <= maximumECoValue ? hue : redColorValue},62%,59%)`;\n}","export const Icon = {\n    thermometer: `thermometer`,\n    humidity: `humidity`\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThermometerFull, faTint } from '@fortawesome/free-solid-svg-icons';\nimport {Icon} from './Icon';\nimport \"./IconWithValue.scss\";\n\n\nexport const IconWithValue = ({ value, icon }: {value:string, icon:string}):JSX.Element => {\n\n    return <p className='icon-elem'><FontAwesomeIcon icon={getIconFromIconName(icon)} size=\"lg\" /> <span className='value-elem'>{value}</span></p>\n    \n}\n\nconst getIconFromIconName = (iconName:string) => {\n    switch (iconName) {\n        case Icon.humidity: return faTint;\n        case Icon.thermometer: return faThermometerFull;\n        default: return faTint;\n    }\n}","//eslint-disable-next-line\nimport React, { useMemo } from \"react\";\nimport { AreaClosed } from \"@visx/shape\";\nimport {  scaleLinear, scaleTime } from '@visx/scale'\nimport { AxisBottom, AxisLeft } from '@visx/axis';\nimport { extent } from \"d3-array\";\nimport { GridColumns } from '@visx/grid';\nimport moment from 'moment';\nimport \"./TimeWithValuesGraph.scss\";\nimport { ApiResponse } from '../../types/api';\n\n\nconst graphColor = '#bdc3c7';\nconst axisColor = '#878a8c';\n\n// axis config\nconst axisBottomTickLabelProps = {\n  dx: '0em',\n  dy: '-0.5em',\n  textAnchor: 'middle' as const,\n  fontFamily: 'Montserrat',\n  fontSize: 10,\n  fill: axisColor,\n};\nconst axisLeftTickLabelProps = {\n  dx: '0.4em',\n  dy: '0.25em',\n  fontFamily: 'Montserrat',\n  fontSize: 10,\n  textAnchor: 'end' as const,\n  fill: axisColor,\n};\n\ninterface Props {\n  endTimeValue: number,\n  width: number,\n  historicalValues: ApiResponse[],\n  uom: string,\n  marginY: number,\n  marginX: number,\n  height: number,\n  timeFormat: string\n}\n\n// Graph setup\nexport const TimeWithValuesGraph = ({ endTimeValue, width, historicalValues, uom, marginY, marginX, height, timeFormat }: Props): JSX.Element => {\n\n  const timeRank = {\n    startTime: 0,\n    endTime: endTimeValue\n  }\n  const stock = historicalValues.slice(timeRank.startTime, timeRank.endTime);\n  const getDate = (d: ApiResponse) => new Date(parseInt(d.time) * 1000);\n  const getStockValue = (d: ApiResponse) => d.value;\n  const xMax = width - marginX;\n  const yMax = height - marginY;\n\n\n  // scales\n  const scaleGridColumns = useMemo(\n    () =>\n      scaleLinear({\n        range: [marginX, xMax + marginX],\n        domain: [1, timeRank.endTime],\n      }),\n    [xMax, marginX, timeRank.endTime]\n  );\n  const scaleAxisLeft = useMemo(\n    () =>\n      scaleLinear({\n        domain: [\n          Math.max(...stock.map((d: ApiResponse) => d.value)),\n          Math.min(...stock.map((d: ApiResponse) => d.value))\n        ],\n        range: [0, yMax - marginY],\n      }),\n    [yMax, marginY, stock]\n  );\n\n  const scaleAxisBottom = useMemo(\n    () =>\n      scaleTime({\n        range: [marginX, xMax + marginX],\n        domain: extent(stock, getDate) as [Date, Date]\n      }),\n    [xMax, marginX, stock]\n  );\n\n  const dateScale = useMemo(\n    () =>\n      scaleTime({\n        range: [marginX, xMax + marginX],\n        domain: extent(stock, getDate) as [Date, Date]\n      }),\n    [xMax, marginX, stock]\n  );\n  const stockValueScale = useMemo(\n    () =>\n      scaleLinear({\n        range: [marginY, yMax],\n        domain: [\n          Math.min(...stock.map((d: ApiResponse) => Math.min(d.value))),\n          Math.max(...stock.map((d: ApiResponse) => Math.max(d.value)))\n        ],\n        reverse: true\n      }),\n    [yMax, marginY, stock]\n  );\n\n  return (\n    <div className='text-left time-with-values-graph-elem'>\n      <svg width={width + marginY} height={height}>\n        <AreaClosed\n          data={stock}\n          x={(d: ApiResponse) => dateScale(getDate(d)) ?? 0}\n          y={(d: ApiResponse) => stockValueScale(getStockValue(d)) ?? 0}\n          yScale={stockValueScale}\n          fill={graphColor}\n        />\n        <GridColumns\n          scale={scaleGridColumns}\n          height={yMax - marginY}\n          top={marginY}\n          numTicks={timeRank.endTime}\n          stroke={axisColor}\n          strokeWidth={1.5}\n        />\n\n        <AxisBottom\n          top={yMax}\n          scale={scaleAxisBottom}\n          numTicks={timeRank.endTime}\n          stroke={axisColor}\n          hideTicks={true}\n          tickStroke={axisColor}\n          tickLabelProps={() => axisBottomTickLabelProps}\n          tickFormat={(value) => {\n            return moment(value as Date).format(timeFormat)\n          }}\n        />\n\n        <AxisLeft\n          top={marginY}\n          left={marginX}\n          scale={scaleAxisLeft}\n          numTicks={3}\n          hideTicks={true}\n          stroke={axisColor}\n          tickStroke={axisColor}\n          tickLabelProps={() => axisLeftTickLabelProps}\n          tickFormat={(e) => `${e} ${uom}`}\n        />\n\n      </svg>\n    </div>\n  );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport './Card.scss'\n\ninterface Props {\n    children: JSX.Element | JSX.Element[],\n    className?: string\n}\n\nexport const Card = ({ children, className }: Props) => {\n    const classes = classnames(`card-elem`, className);\n    return (\n        <div className={classes}>\n            {children}\n        </div>\n    )\n}\n\n","export const config = {\n    apiUrl: `http://134.209.80.241:3100/`\n}","import axios from 'axios';\nimport { config } from '../config';\nimport { ApiResponse } from '../types/api';\nimport moment from 'moment';\n\nexport class ApiService {\n    static user: string;\n    static async makeGetRequest(endpoint: string, user?: string, fromDate?: number, toDate?: number) {\n        return axios({\n            method: 'GET',\n            url: config.apiUrl + endpoint,\n            params: {\n                fromDate: fromDate,\n                toDate: toDate,\n                user: user\n            },\n        }).then((response) => {\n            return response.data;\n        })  \n    }\n\n    static async getCo2Data(fromDate: any, toDate: any, selectedDevice: string): Promise<ApiResponse[]> {\n        const fromDateTs = Math.round(moment(fromDate).valueOf()/1000);\n        const toDateTs = Math.round(moment(toDate).valueOf()/1000);\n        return ApiService.makeGetRequest('data/co2', selectedDevice, fromDateTs, toDateTs);\n        //return Promise.resolve(historicalValues);\n    }\n    static async getTemperatureData(fromDate: number, toDate: number, selectedDevice: string): Promise<ApiResponse[]> {\n        const fromDateTs = Math.round(moment(fromDate).valueOf()/1000);\n        const toDateTs = Math.round(moment(toDate).valueOf()/1000);\n        return ApiService.makeGetRequest('data/temperature', selectedDevice, fromDateTs, toDateTs);\n        //return Promise.resolve(historicalValues);\n    }\n    static async getHumidityData(fromDate: number, toDate: number, selectedDevice: string): Promise<ApiResponse[]> {\n        const fromDateTs = Math.round(moment(fromDate).valueOf()/1000);\n        const toDateTs = Math.round(moment(toDate).valueOf()/1000);\n        \n        return ApiService.makeGetRequest('data/humidity', selectedDevice, fromDateTs, toDateTs);\n        //return Promise.resolve(historicalValues);\n    }\n\n    static async getUsersList(): Promise<Array<string>> {\n        // return ApiService.makeGetRequest('/users');\n        return Promise.resolve(['@erguro1973', 'Andreas_IBZ']);\n    }\n\n    static async getCurrentCo2(selectedDevice: string): Promise<ApiResponse> {\n        return ApiService.makeGetRequest('current/co2', selectedDevice);\n        //return Promise.resolve({value: 29, time: \"1587726000000\"});\n        \n    }\n    static async getCurrentTemperature(selectedDevice: string): Promise<ApiResponse> {\n        return ApiService.makeGetRequest('current/temperature', selectedDevice);\n        //return Promise.resolve({value: 22, time: \"1587726000000\"});\n    }\n    static async getCurrentHumidity(selectedDevice: string): Promise<ApiResponse> {\n        return ApiService.makeGetRequest('current/humidity', selectedDevice);\n        //return Promise.resolve({value: 85, time: \"1587726000000\"});\n    }\n    \n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport './LateralBar.scss';\n\ninterface Props {\n    devices: string[],\n    activeDevice: string,\n    onClickOnClose: () => void,\n    onClickOnDevice: (device: string) => void,\n}\n\nexport const LateralBar = ({ onClickOnClose, onClickOnDevice, devices, activeDevice }: Props): JSX.Element => {\n\n    return (\n        <div className=\"side-menu\">\n            <div className=\"top d-flex p-3 pl-4 justify-content-between align-items-center\">\n                <FontAwesomeIcon icon={faBars} size=\"lg\" />\n                <p className=\"m-0 font-weight-bold\">NOMBRE DE LA APP</p>\n                <div className=\"close-button border-0\" onClick={onClickOnClose}>\n                    <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\n                </div>\n            </div>\n\n            <div className=\"menu my-5 ml-5 d-flex flex-column \">\n                <p className=\"font-weight-bold pb-4 h5\">Listado de dispositivos</p>\n                <ul className='list-unstyled'>\n                    {devices.map(device => (\n                        <li key={device} \n                                className={`border-0 my-2 px-0 ${device === activeDevice && 'menu-button-actived'} menu-button`}\n                                onClick={() => onClickOnDevice(device)}>\n                                {device}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            <hr className=\"ml-5 text-left font-weight-bold\" />\n\n            <div className=\"about mt-5 pl-5 font-weight-bold\">\n                <p>About</p>\n            </div>\n\n        </div >\n    )\n}\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport './LateralMenuTransition.scss';\n\ninterface Props {\n    children: JSX.Element,\n    isVisible: boolean,\n}\n\nexport const LateralMenuTransition = ({ children, isVisible }: Props) => {\n    return (\n        <>\n            <CSSTransition\n                in={isVisible}\n                timeout={1000}\n                classNames='lateral'\n                unmountOnExit\n            >\n                {children}\n            </CSSTransition>\n        </>\n    )\n};\n","import { useState, useEffect } from 'react';\n\nexport const useStateWithLocalStorage = (localStorageKey: string): [string, (state: string) => void] => {\n    const [value, setValue] = useState(\n        localStorage.getItem(localStorageKey) || ''\n    );\n\n    useEffect(() => {\n        localStorage.setItem(localStorageKey, value);\n    }, [value, localStorageKey]);\n\n    return [value, setValue];\n};","import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { CurrentCo2 } from '../../components/CurrentCo2/CurrentCo2';\nimport { IconWithValue } from '../../components/IconWithValue/IconWithValue';\nimport { Icon } from '../../components/IconWithValue/Icon';\nimport ParentSize from \"@visx/responsive/lib/components/ParentSize\";\nimport { TimeWithValuesGraph } from \"../../components/TimeWithValuesGraph/TimeWithValuesGraph\";\nimport { Link } from 'react-router-dom';\nimport { Card } from '../../components/Card/Card';\nimport './Main.scss';\nimport { ApiService } from '../../services/ApiService';\nimport { ApiResponse } from '../../types/api';\nimport { LateralBar } from '../../components/LateralBar/LateralBar';\nimport { LateralMenuTransition } from '../../components/LateralMenuTransition/LateralMenuTransition';\nimport { useStateWithLocalStorage } from '../../hooks/useStateWithLocalStorage';\n\n\nconst hours = 8;\n\nconst Main = () => {\n\n    const [selectedDevice, setSelectedDevice] = useStateWithLocalStorage('deviceSelected');\n    const [menuActived, setMenuActived] = useState<boolean>(false);\n    const [currentCo2, setCurrentCo2] = useState<number>(0);\n    const [currentTemperature, setCurrentTemperature] = useState<number>(0);\n    const [currentHumidity, setCurrentHumidity] = useState<number>(0)\n    const [co2Data, setCo2Data] = useState<ApiResponse[]>([]);\n    const [deviceList, setDeviceList] = useState<string[]>([]);\n\n    useEffect(() => {\n        ApiService.getUsersList().then((apiResponse: string[]) => {\n            setDeviceList(apiResponse)\n        });\n        \n    }, [])\n\n    useEffect(() => {\n        // Provisional data to work \\/\\/\\/\n        const HOUR = 1000 * 60 * 60;\n    const fromDate = Math.floor((Date.now() - HOUR) / 1000);\n    const toDate = new Date();\n\n        if (selectedDevice) {\n            ApiService.getCurrentCo2(selectedDevice).then((apiResponse: any) => {\n                setCurrentCo2(apiResponse[0].value);\n            })\n            ApiService.getCurrentTemperature(selectedDevice).then((apiResponse: any) => {\n                setCurrentTemperature(apiResponse[0].value);\n            })\n            ApiService.getCurrentHumidity(selectedDevice).then((apiResponse: any) => {\n                setCurrentHumidity(apiResponse[0].value);\n            })\n            ApiService.getCo2Data(fromDate, toDate, selectedDevice).then((apiResponse: ApiResponse[]) => {\n                setCo2Data(apiResponse);\n            })\n        }\n    }, [selectedDevice]);\n\n    const onClickOnDevice = (device: string) => {\n        setSelectedDevice(device);\n        setMenuActived(false);\n    }\n\n    return (\n        <div>\n            <div className='container'>\n                <LateralMenuTransition isVisible={menuActived}>\n                    <LateralBar activeDevice={selectedDevice} devices={deviceList} onClickOnClose={() => setMenuActived(false)} onClickOnDevice={onClickOnDevice} />\n                </LateralMenuTransition>\n                <div className='row'>\n                    <div className='col ml-4 pt-4 mt-3 h4 mb-0 d-inline menu-elem' >\n                        <p className='mb-0 d-inline' onClick={() => setMenuActived(true)}><FontAwesomeIcon icon={faBars} size=\"lg\" /></p>\n                    </div>\n                </div>\n            </div>\n            {!selectedDevice &&\n                <div className='container'>\n                    <div className='row'>\n                        <div className='col px-5 py-3 pt-5 mt-3'>\n                            <h4 className='select-a-device'>Acceda al menú lateral y seleccione un dispositivo</h4>\n                        </div>\n                    </div>\n                </div>}\n            {selectedDevice &&\n                <>\n                    <CurrentCo2 eCoValue={currentCo2} />\n                    <div className='container px-5 text-center'>\n                        <Card>\n                            <div className='row icon-with-value-elem'>\n                                <div className='col'>\n                                    <IconWithValue value={`${Math.round(currentTemperature)}º`} icon={Icon.thermometer} />\n                                </div>\n                                <div className='col'>\n                                    <IconWithValue value={`${Math.round(currentHumidity)}%`} icon={Icon.humidity} />\n                                </div>\n                            </div>\n                        </Card>\n                    </div>\n                    <div className='container px-5 pt-3 mt-4 mb-4 pb-2'>\n                        <Card className='graph-elem'>\n                            <p className='text-elem pt-3 pl-2 mb-3'>Últimas {hours} horas</p>\n                            <div className='row'>\n                                <div className='col text-center'>\n                                    <ParentSize className='graph-elem'>\n                                        {({ width }) => <TimeWithValuesGraph endTimeValue={8} uom={'ppm'} timeFormat={'H:mm'} marginY={20} marginX={60} historicalValues={co2Data} width={width - 20} height={160} />}\n                                    </ParentSize>\n                                </div>\n                            </div>\n                        </Card>\n                    </div>\n                    <div className='container pt-1 pb-5'>\n                        <div className='text-center m-auto rounded-circle search-elem'>\n                            <Link to='/History' className='search-link'><FontAwesomeIcon icon={faSearch} size=\"lg\" /></Link>\n                        </div>\n                    </div>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default Main\n","import React, { useMemo } from 'react';\nimport './DatePicker.scss';\nimport shortid from 'shortid';\n\nexport const DatePicker = ({ text, date, onDateChanged }: {text:string,date:number,onDateChanged:Function}):JSX.Element => {\n  const idValue = useMemo(() => shortid.generate(), []);\n  return (\n    <>\n        <label className='pt-2 date-picker-text' htmlFor={idValue}>{text}:</label>\n        <input value={date} className='date-picker-input' onChange={({ target }) => onDateChanged(target.value)} name={text} type=\"date\" id={idValue} />\n    </>\n  )\n}\n","import React from 'react';\nimport './CardWithTextTab.scss';\n\nexport const CardWithTextTab = ({ value ,children }: {value: string, children: JSX.Element} ):JSX.Element => {\n    return (\n        <div className='py-4'>\n            <div className='card-tab inline d-inline-block px-3 py-1 text-center'>{value}</div>\n            <div className='card-with-text-tab'>\n                {children}\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\nimport ParentSize from \"@visx/responsive/lib/components/ParentSize\";\nimport { DatePicker } from '../../components/DatePicker/DatePicker';\nimport { TimeWithValuesGraph } from '../../components/TimeWithValuesGraph/TimeWithValuesGraph';\nimport { CardWithTextTab } from '../../components/CardWithTextTab/CardWithTextTab'\nimport './History.scss'\nimport { ApiService } from '../../services/ApiService';\nimport { ApiResponse } from '../../types/api';\nimport { useStateWithLocalStorage } from '../../hooks/useStateWithLocalStorage';\n\n\nconst History = (): JSX.Element => {\n    const [fromDate, setFromDate] = useState<number>(0);\n    const [toDate, setToDate] = useState<number>(0);\n    const [graphsOnScreen, setGraphsOnScreen] = useState<boolean>(false);\n    const [co2Data, setCo2Data] = useState<ApiResponse[]>([]);\n    const [temperatureData, setTemperatureData] = useState<ApiResponse[]>([]);\n    const [humidityData, setHumidityData] = useState<ApiResponse[]>([]);\n    const [selectedDevice] = useStateWithLocalStorage('deviceSelected');\n\n    useEffect(() => {\n        if (graphsOnScreen) {\n        ApiService.getCo2Data(fromDate, toDate, selectedDevice).then((apiResponse: ApiResponse[]) => setCo2Data(apiResponse));\n        ApiService.getTemperatureData(fromDate, toDate, selectedDevice).then((apiResponse: ApiResponse[]) => setTemperatureData(apiResponse));\n        ApiService.getHumidityData(fromDate, toDate, selectedDevice).then((apiResponse: ApiResponse[]) => setHumidityData(apiResponse));\n        }\n    }, [graphsOnScreen, fromDate, toDate, selectedDevice])\n\n\n    return (\n        <div className='container history-elem-container'>\n            <div className='row'>\n                <Link to='/' className='ml-4 mt-4 rounded-circle arrow-back-elem'><FontAwesomeIcon icon={faChevronLeft} size=\"lg\" /></Link>\n            </div>\n            <div className='row'>\n                <h1 className='text-center history-text-elem'>Histórico</h1>\n            </div>\n            <div className='row date-range-pickers-container pt-3 mt-3'>\n                <div className=\"col mx-4 my-3\">\n                    <DatePicker date={fromDate} onDateChanged={(value: number) => setFromDate(value)} text='Desde' />\n                    <DatePicker date={toDate} onDateChanged={(value: number) => setToDate(value)} text='Hasta' />\n                </div>\n            </div>\n            <div className='row'>\n                <div className=\"col pl-4 ml-3 my-3\">\n                    <button className='search-button btn' disabled={!fromDate || !toDate} onClick={() => setGraphsOnScreen(!graphsOnScreen)}>Buscar </button>\n                </div>\n            </div>\n            {graphsOnScreen &&\n                <>\n                    <CardWithTextTab value='eCO²'>\n                        <div className=\"row\">\n                            <ParentSize className='history-graph-elem'>\n                                {({ width }) => <TimeWithValuesGraph endTimeValue={10} uom={'ppm'} timeFormat={'H:mm'} marginY={20} marginX={55} historicalValues={co2Data} width={width - 20} height={118} />}\n                            </ParentSize>\n                        </div>\n                    </CardWithTextTab>\n                    <CardWithTextTab value='Temp.'>\n                        <div className=\"row\">\n                            <ParentSize className='history-graph-elem'>\n                                {({ width }) => <TimeWithValuesGraph endTimeValue={10} uom={'ºC'} timeFormat={'H:mm'} marginY={20} marginX={55} historicalValues={temperatureData} width={width - 20} height={118} />}\n                            </ParentSize>\n                        </div>\n                    </CardWithTextTab>\n                    <CardWithTextTab value='Humidity'>\n                        <div className=\"row\">\n                            <ParentSize className='history-graph-elem'>\n                                {({ width }) => <TimeWithValuesGraph endTimeValue={10} uom={'%'} timeFormat={'H:mm'} marginY={20} marginX={55} historicalValues={humidityData} width={width - 20} height={118} />}\n                            </ParentSize>\n                        </div>\n                    </CardWithTextTab>\n                </>\n            }\n        </div>\n    );\n}\n\nexport default History","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const ScrollToTop = ({children}: {children: JSX.Element} ):JSX.Element => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return children;\n}","import React from 'react';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Main from './screens/Main/Main';\nimport History from './screens/History/History';\nimport { ScrollToTop } from '../src/components/ScrollToTop/ScrollToTop';\nimport \"./index.scss\";\n\n\nfunction App() {\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path='/History'>\n          <ScrollToTop>\n            <History />\n          </ScrollToTop>\n        </Route>\n        <Route path='/' exact>\n          <ScrollToTop>\n            <Main />\n          </ScrollToTop>\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}